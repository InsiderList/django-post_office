# Generated by Django 3.0.8 on 2020-07-31 13:58

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_multitenant.mixins
import jsonfield.fields


class Migration(migrations.Migration):

    dependencies = [
        ('insiderlist', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('post_office', '0009_requeued_mode'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnymailLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obj_created_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('obj_updated_datetime', models.DateTimeField(auto_now=True, verbose_name='Last updated')),
                ('event_id', models.CharField(blank=True, help_text='A str unique identifier for the event, if available; otherwise None. Can be used to avoid processing the same event twice. Exact format varies by ESP, and not all ESPs provide an event_id for all event types.', max_length=255, null=True, verbose_name='Event ID')),
                ('timestamp', models.DateTimeField(blank=True, help_text='A datetime indicating when the event was generated. (The timezone is often UTC, but the exact behavior depends on your ESP and account settings. Anymail ensures that this value is an aware datetime with an accurate timezone.)', null=True, verbose_name='Time stamp')),
                ('message_id', models.CharField(blank=True, help_text='A str unique identifier for the message (email) object', max_length=255, null=True, verbose_name='Message ID')),
                ('recipient', models.CharField(blank=True, max_length=255, null=True, verbose_name='Recipient')),
                ('event_type', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'accepted'), (1, 'rejected'), (2, 'queued'), (3, 'delivered'), (4, 'failed'), (5, 'permanent_fail'), (6, 'temporary_fail'), (7, 'opened'), (8, 'clicked'), (9, 'unsubscribed'), (10, 'complained'), (11, 'stored'), (12, 'sent'), (13, 'invalid'), (14, 'bounced'), (15, 'deferred'), (16, 'autoresponded'), (17, 'subscribed'), (18, 'unknown')], help_text='A normalized str identifying the type of tracking event. Also updated on AnymailEmail as recipient_status.', null=True, verbose_name='Event type')),
                ('reject_reason', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'invalid'), (1, 'bounced'), (2, 'timed_out'), (3, 'blocked'), (4, 'spam'), (5, 'rejected'), (6, 'unsubscribed'), (7, 'other'), (8, 'none')], help_text="For bounced' and 'rejected' events, a normalized str giving the reason for the bounce/rejection.", null=True, verbose_name='Reject reason')),
                ('description', models.TextField(blank=True, help_text='If available, a str with a (usually) human-readable description of the event. Otherwise None. For example, might explain why an email has bounced. Exact format varies by ESP (and sometimes event type).', null=True, verbose_name='Description')),
                ('click_url', models.CharField(blank=True, help_text="For 'clicked' events, the str url the user clicked. Otherwise None.", max_length=255, null=True, verbose_name='Click URL')),
                ('esp_event', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The “raw” event data from the ESP, deserialized into a python data structure. For most ESPs this is either parsed JSON (as a dict), or HTTP POST fields (as a Django QueryDict). This gives you (non-portable) access to additional information provided by your ESP. For example, some ESPs include geo-IP location information with open and click events.', null=True, verbose_name='ESP Event')),
            ],
            options={
                'verbose_name': 'ANYMAIL Log',
                'verbose_name_plural': 'ANYMAIL Logs',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
        ),
        migrations.AlterModelOptions(
            name='log',
            options={'verbose_name': 'POST_OFFICE Log', 'verbose_name_plural': 'POST_OFFICE Logs'},
        ),
        migrations.AddField(
            model_name='attachment',
            name='issuer',
            field=models.ForeignKey(blank=True, help_text='Issuer subject to MAR for delayed disclosure', null=True, on_delete=django.db.models.deletion.CASCADE, to='insiderlist.Issuer', verbose_name='Issuer (optional)'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='obj_created_datetime',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='Date created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='attachment',
            name='obj_updated_datetime',
            field=models.DateTimeField(auto_now=True, verbose_name='Last updated'),
        ),
        migrations.AddField(
            model_name='email',
            name='anymail_message_id',
            field=models.CharField(blank=True, help_text='The message id assigned by the ESP, or None if the send call failed.', max_length=255, null=True, verbose_name='Anymail message ID'),
        ),
        migrations.AddField(
            model_name='email',
            name='content_type',
            field=models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(('app_label', 'insiderlist'), ('model', 'eventlist')), models.Q(('app_label', 'insiderlist'), ('model', 'permanentlist')), models.Q(('app_label', 'insiderlist'), ('model', 'pdmrlist')), _connector='OR'), null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='Content type'),
        ),
        migrations.AddField(
            model_name='email',
            name='issuer',
            field=models.ForeignKey(blank=True, help_text='Issuer subject to MAR for delayed disclosure', null=True, on_delete=django.db.models.deletion.CASCADE, to='insiderlist.Issuer', verbose_name='Issuer (optional)'),
        ),
        migrations.AddField(
            model_name='email',
            name='obj_created_datetime',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='Date created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='email',
            name='obj_updated_datetime',
            field=models.DateTimeField(auto_now=True, verbose_name='Last updated'),
        ),
        migrations.AddField(
            model_name='email',
            name='object_id',
            field=models.PositiveIntegerField(blank=True, null=True, verbose_name='Object ID'),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='context_variables',
            field=jsonfield.fields.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='issuer',
            field=models.ForeignKey(blank=True, help_text='Issuer subject to MAR for delayed disclosure', null=True, on_delete=django.db.models.deletion.CASCADE, to='insiderlist.Issuer', verbose_name='Issuer (optional)'),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='obj_created_datetime',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='Date created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='obj_updated_datetime',
            field=models.DateTimeField(auto_now=True, verbose_name='Last updated'),
        ),
        migrations.AddField(
            model_name='log',
            name='issuer',
            field=models.ForeignKey(blank=True, help_text='Issuer subject to MAR for delayed disclosure', null=True, on_delete=django.db.models.deletion.CASCADE, to='insiderlist.Issuer', verbose_name='Issuer (optional)'),
        ),
        migrations.AddField(
            model_name='log',
            name='obj_created_datetime',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='Date created'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='log',
            name='obj_updated_datetime',
            field=models.DateTimeField(auto_now=True, verbose_name='Last updated'),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='emails',
            field=models.ManyToManyField(related_name='attachments', to='post_office.Email', verbose_name='Emails'),
        ),
        migrations.AlterField(
            model_name='email',
            name='expires_at',
            field=models.DateTimeField(blank=True, help_text="Email won't be sent after this timestamp", null=True, verbose_name='Expires'),
        ),
        migrations.AlterField(
            model_name='email',
            name='scheduled_time',
            field=models.DateTimeField(blank=True, db_index=True, help_text='The scheduled sending time', null=True, verbose_name='Scheduled Time'),
        ),
        migrations.AlterField(
            model_name='email',
            name='status',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'sent'), (1, 'failed'), (2, 'queued'), (3, 'requeued')], db_index=True, null=True, verbose_name='POST_OFFICE status'),
        ),
        migrations.AlterField(
            model_name='log',
            name='email',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='post_office.Email', verbose_name='Email object'),
        ),
        migrations.AddConstraint(
            model_name='attachment',
            constraint=models.UniqueConstraint(fields=('id', 'issuer_id'), name='attachment_unique_to_issuer'),
        ),
        migrations.AddConstraint(
            model_name='email',
            constraint=models.UniqueConstraint(fields=('id', 'issuer_id'), name='email_unique_to_issuer'),
        ),
        migrations.AddConstraint(
            model_name='emailtemplate',
            constraint=models.UniqueConstraint(fields=('id', 'issuer_id'), name='emailtemplate_unique_to_issuer'),
        ),
        migrations.AddConstraint(
            model_name='log',
            constraint=models.UniqueConstraint(fields=('id', 'issuer_id'), name='log_unique_to_issuer'),
        ),
        migrations.AddField(
            model_name='anymaillog',
            name='email',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='anymail_logs', to='post_office.Email', verbose_name='Email object'),
        ),
        migrations.AddField(
            model_name='anymaillog',
            name='issuer',
            field=models.ForeignKey(blank=True, help_text='Issuer subject to MAR for delayed disclosure', null=True, on_delete=django.db.models.deletion.CASCADE, to='insiderlist.Issuer', verbose_name='Issuer (optional)'),
        ),
        migrations.AddIndex(
            model_name='anymaillog',
            index=models.Index(fields=['id'], name='anymaillog_id_idx'),
        ),
        migrations.AddConstraint(
            model_name='anymaillog',
            constraint=models.UniqueConstraint(fields=('id', 'issuer_id'), name='anymaillog_unique_to_issuer'),
        ),
        migrations.AddConstraint(
            model_name='anymaillog',
            constraint=models.CheckConstraint(check=models.Q(event_type__in=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]), name='event_type_choice_anymaillog'),
        ),
        migrations.AddConstraint(
            model_name='anymaillog',
            constraint=models.CheckConstraint(check=models.Q(reject_reason__in=[0, 1, 2, 3, 4, 5, 6, 7, 8]), name='reject_reason_choice_anymaillog'),
        ),
    ]
